1. git 的安装和设置
	(1) git安装
	(2) 开始菜单--git--git bash
	(3) 配置用户名和邮箱地址：（global参数表示本机器所有仓库均使用下面的用户名和地址）
		$ git config --global user.email "YOUR EMAIL"

2. 创建版本库repository
	(1)利用cd命令转入到想创建仓库的路径下
	(2)$ mkdir learngit   (创建空白目录，Learngit为仓库名)
	   $ cd learngit     （转入到该文件夹下）
	   $ pwd				（显示当前目录）
	(3)$ git init         (将该目录变为git可以管理的仓库)
	(4)添加文件到版本库：
		A:创建一个readme.txt文件，放到Learngit目录下（子目录也行）
		B:$ git add readme.txt（可以一次添加多个文件，文件名之间用空格隔开即可）
		C:$ git commit -m "description"(""内为对本次提交内容的说明，可以是任意文字)
	(5)查看当前状态：$ git status
3. 版本回退
	(1)查看提交日志：$ git log
		如果想一行显示：$ git log --pretty=oneline
	(2)git中当前版本为HEAD,上一版本为HEAD^,上上一版本为HEAD^^...
		回退到上一版本：$ git reset --hard HEAD^
	(3)回到未来的某一版本：
		找到该版本的commit_id,然后用$ git reset --hard commit_id(版本号写前面几位即可)
	(4)查看历史命令：$ git reflog
	    查看文件内容：$ cat <filename>

4. 工作区和暂存区
	(1)工作区就是在电脑里看到的目录，如前面建的learngit
	(2)工作区有个隐藏目录.git，为git版本库，其中最重要的就是称为stage（或者叫index）的暂存区，
	   还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
	(3)git add命令将文件提交到暂存区，git commit将当前暂存区内容全部提交到当前分支。

5. 管理修改
	(1)git管理的是修改而非文件
	(2)每次修改都必须先通过git add添加到暂存区，之后才可以通过git commit提交到当前分支。
	(3)可以通过 git diff HEAD-- <filename>查看工作区和版本库最新版本的区别。
	
6. 撤销修改
	(1)场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	(2)场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
		第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
	(3)场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，
		不过前提是没有推送到远程库。

7. 删除文件
	(1)删除工作区文件：rm <filename>
	(2)删除版本库文件：git rm <filename>然后git commit
	(3)误删恢复：git checkout -- <filename>但是只能恢复到最新版本，丢失最近一次提交后修改的内容

8. 远程仓库
	(1)创建SSH Key。在用户主目录(learngit仓库的上一级)下，看看有没有.ssh目录，
	   如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。
	   如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
	   $ ssh-keygen -t rsa -C "youremail@example.com"然后一路回车
	(2)登陆GitHub，打开“Account settings”，“SSH Keys”页面，
	   然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容，
	   点“Add Key”，你就应该看到已经添加的Key。
9. 添加远程库
	(1)在github创建一个新的仓库，命名为learngit
	(2)在本地learngit目录下运行：
		$ git remote add origin git@github.com:xxh4869/learngit.git
	(3)把本地库的所有内容推送到远程库：$ git push -u origin master
	(4)只要本地做了提交，就可以通过$ git push origin master将最新修改推送到远程库
10. 从远程库克隆
	(1)创建一个远程库gitskills。
	(2)克隆到本地：$ git clone git@github.com:xxh4869/gitskills.git
	(3)然后本地就会有该仓库了。
11. 分支的创建与合并
	（1）A:开始只有一条主分支时，git用master指向最新提交，再用HEAD指向master，就能确定当前分支.
	     B:添加新分支时，创建新的指针指向最新提交，HEAD指向新指针，之后的每次提交，新指针都会移动，而master指针不变；
	     C:合并分支，git将master移到新指针的当前提交，再将HEAD指向master.

	（2）查看分支：git branch	----显示所有分支

		创建分支：git branch <name>

		切换分支：git checkout <name>

		创建+切换分支：git checkout -b <name>		

		合并某分支到当前分支：git merge <name>

		删除分支：git branch -d <name>

12.冲突的产生和解决
	（1）产生原因：两个已经提交的分支上的相同文件，相同位置上进行了不同的操作进行了合并。
		比如master上有个a文件，在分支b上对a文件的某个位置进行了修改并提交，然后在master上也修改了a文件的相同位置并提交，
		此时合并，就会产生冲突。
	（2）解决方法：查看冲突文件，仔细对比，取综合的并集，尽量把所有不同的文件保留,共同的只留一份。
	（3）避免冲突：修改之前先合并别的分支。
	（4）查看分支合并情况：git log --graph --pretty=oneline --abbrev-commit

13.分支管理策略
	（1）分支策略：在实际开发中，我们应该按照几个基本原则进行分支管理：

		首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

		那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

		你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

	（2）通常合并分支时，Git会使用fast forward模式，这种模式下删除分支后会丢失分支信息，就看不出来曾经合并过
		如果要强制禁用fast forward模式，git会生成一个新的commit,这样从分支历史上就能看出分支信息
	     方法：git merge --no-ff -m "comment" <branch name>

14.Bug分支
	（1）修复bug时，通过创建新的bug分支进行修复，然后合并，最后删除。
	     当手头工作没有完成时，可以先把当前工作区git stash一下，然后再去修复bug,修复后再git stash pop回到工作现场。
	（2）git stash:将当前的工作现场暂存，等以后恢复现场后继续工作。（如果不进行隐藏，工作区和暂存区都是公共的，会收到bug分支的影响）
	     git stash list:查看被缓存的工作现场
	     git stash apply:恢复工作现场，但缓存的stash内容并不删除，需要用git stash drop删除。
	     git stash pop：恢复的同时删除stash内容
15.feature分支
	（1）开发一个新feature，最好新建一个分支；
	（2）如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

16.多人协作
	（1）查看远程库信息：git remote 或者git remote -v,前者只显示远程库名称（默认是origin），后者会显示名称和详细信息，包括在github上的地址
	（2）推送分支：git push origin <branch>，将制定分支推送到远程库。一般master和dev（所有成员工作的分支）都必须与远程同步，自己开发的分支可以视心情而定。
		如果推送失败，先用git pull抓取远程的新提交
	（3）在本地创建和远程分支对应的分支：git checkout -b branchname origin/branchname
	（4）建立本地分支和远程分支的关联：git --set-upstream branchname origin/branchname
	（5）从远程抓取分支：git pull，有冲突的话先按提示解决冲突。

17.使用github
	（1）github上可以任意fork开源的仓库（点fork即在自己的账号下clone了一个仓库）
	（2）自己拥有fork后的仓库的读写权限（只能往自己clone的库上推送修改，想推送到官方的只能pull request看官方会不会接受了）

18.使用码云

19.忽略特殊文件
	（1）需要忽略的文件类型
		A:操作系统自动生成的文件，比如缩略图（Thumb.db文件）
		B:忽略编译生成的中间文件、可执行文件等，比如java编译产生的.class文件
		C:忽略自己的带有敏感信息的配置文件，比如存放口令的配置文件。
	（2）规则：
		# 此为注释 – 将被 Git 忽略

		*.cs       # 忽略所有 .cs 结尾的文件
		!ABC.cs    # 但 ABC.cs 除外
		/BLL       # 仅仅忽略项目根目录下的 BLL 文件，不包括 subdir/BLL
		build/     # 忽略 build/ 目录下的所有文件
		doc/*.txt  # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
	（3）举例：
		# Windows:
		Thumbs.db
		ehthumbs.db
		Desktop.ini

		# Python:
		*.py[cod]
		*.so
		*.egg
		*.egg-info
		dist
		build

		# My configurations:
		db.ini
		deploy_key_rsa
		利用文本编辑器写上面的代码，保存为.gitignore文件，保存类型为所有类型，提交到git即可。

	（4）强制添加已被忽略的文件：$git add -f <filename>
	（5）检查忽略规则：$git check-ignore -v <filename>会显示目标文件在ignore文件的哪条规则中被忽略。
	（6）.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理。

20.配置别名
	（1）格式：$ git config --global alias.别名 本名   （--global是全局参数，对本电脑上所有git库适用）
	（2）举例：
		A:$ git config --global alias.st status之后就可以用$git st代替 $git status
		B:$ git config --global alias.unstage 'reset HEAD',用unstage撤销修改
		C:$ git config --global alias.last 'log-1'用$ git last查看最后一次提交信息

	（3）不包含--global的配置文件只对当前库有效，放在各个Git仓库的.git/config中，用$cat .git/config读取，其中[alias]后面跟着的就是别名配置信息，修改或者删除，针对对应行即可
	（4）包含--global的，对当前用户有效，放在用户主目录（learngit的上一级）下的隐藏文件.gitconfig中，查看和修改同上。























